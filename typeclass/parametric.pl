/*
    A, C |- x  : (x : σ ∈ A)      (var)

    A, C |- e : ∀α::Γ.σ     C  ||- τ :: Γ
    ----------------------------------------(∀-elim)
    A, C |- e  : [α |-> τ] σ

    A, C.α::Γ |- e : σ    (α ∉ fv A ∪ reg C) 
    -----------------------------------------  (∀-intro)
    A, C |- e : ∀α：：Γ.σ

    A, C |- e : τ' -> τ'    A, C |- e' : τ'
    ----------------------------------------(λ-elim)
    A, C |- e e' : τ

    A.x:τ', C |- e : τ
    --------------------------(λ-intro)
    A, C |- λx.e : τ' -> τ

    A, C |- e' : σ    A.x:σ, C |- e : τ
    ------------------------------------(let)
    A, C |- let x = e' in e : τ

Figure 3: Typing Rules for Expressions

    A.x:∀fvγ ∀α :: {γ}.σ,C |- p : τ
    -----------------------------------------------(class)
    A, C |- class α: γ where x:σ in p : τ

    A, C |- x:∀α::{γ}.σ   A, C |- e : [α |-> τ']σ
    A, C |- p : τ
    ----------------------------------------------(inst)
    A, C |- inst C' :: τ' where x = e in p : τ

Figure 4: Typing Rules for Declarations
*/